#include <FEHLCD.h>
#include <FEHIO.h>
#include <FEHUtility.h>
#include <FEHMotor.h>

//Declarations for encoders & motors
DigitalEncoder right_encoder(FEHIO::P0_0);
DigitalEncoder left_encoder(FEHIO::P0_1);
FEHMotor right_motor(FEHMotor::Motor0,9.0);
FEHMotor left_motor(FEHMotor::Motor1,9.0);
void turn_left(int percent, int counts);
void turn_right(int percent, int counts);
void move_forward(int percent, int counts) //using encoders
{
    //Reset encoder counts
    right_encoder.ResetCounts();
    left_encoder.ResetCounts();

    //Set both motors to desired percent
    right_motor.SetPercent(percent);
    left_motor.SetPercent(percent);

    //While the average of the left and right encoder is less than counts,
    //keep running motors
    while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);

    //Turn off motors
    right_motor.Stop();
    left_motor.Stop();
}

int main(void)
{
    int motor_percent = 25; //Input power level here
    int count = 40;
    move_forward(motor_percent, 14*count);
    int expected_counts = 222; //Input theoretical counts here
    turn_left(motor_percent, expected_counts); //see function
    move_forward(motor_percent, 10*count);
    turn_right(motor_percent, expected_counts); //see function
    move_forward(motor_percent, 4*count);
    return 0;
}

void turn_left(int percent, int counts) //using encoders

{

right_encoder.ResetCounts();
left_encoder.ResetCounts();

right_motor.SetPercent(percent);
left_motor.SetPercent(-percent);

//While the average of the left and right encoder is less than counts,
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
//keep running motors


//Turn off motors

right_motor.Stop();

left_motor.Stop();
}

void turn_right(int percent, int counts) //using encoders

{

right_encoder.ResetCounts();
left_encoder.ResetCounts();

right_motor.SetPercent(-percent);
left_motor.SetPercent(percent);

//While the average of the left and right encoder is less than counts,
while((left_encoder.Counts() + right_encoder.Counts()) / 2. < counts);
//keep running motors


//Turn off motors

right_motor.Stop();

left_motor.Stop();
}

